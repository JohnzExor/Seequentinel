generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

model User {
  id                       String              @id @default(cuid())
  type                     String
  status                   String
  createdAt                DateTime            @default(now())
  email                    String              @unique
  password                 String
  campusMaintenanceReports CampusMaintenance[] @relation(name: "CampusMaintenance")
  handbookViolationReports HandbookViolation[] @relation(name: "HandbookViolation")
  emergencyReports         Emergencies[]       @relation(name: "EmergenciesToUser")
}

model CampusMaintenance {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  type              String
  media             String[]
  location          String
  user              User?    @relation(name: "CampusMaintenance", fields: [userId], references: [id])
  userId            String?
  status            String
  additionalDetails String?
  isArchived        Boolean  @default(false)
}

model Emergencies {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  type      String
  details   String
  userId    String?
  user      User?    @relation(name: "EmergenciesToUser", fields: [userId], references: [id])
  status    String
}

model HandbookViolation {
  id               String   @id @default(cuid())
  violatorName     String?
  location         String
  createdAt        DateTime @default(now())
  evidence         String[]
  violation        String
  userId           String?
  user             User?    @relation(name: "HandbookViolation", fields: [userId], references: [id])
  status           String
  violationDate    DateTime
  violationDetails String
  isArchived       Boolean  @default(false)
}

model Administrator {
  id       String @id @default(cuid())
  email    String
  password String
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  eventType   String
  userId      String
  ipAddress   String
  objectType  String
  objectId    String
  status      String
  description String?
  source      String?
}
