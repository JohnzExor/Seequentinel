generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

enum ReportTypeEnum {
  CampusMaintenance
  HandbookViolation
}

enum StatusEnum {
  Request
  Reviewing
  Accepted
  Completed
}

model User {
  id              String        @id @default(cuid())
  type            String
  status          String
  createdAt       DateTime      @default(now())
  email           String        @unique
  password        String
  reports         Reports[]     @relation(name: "Reports")
  emergencies     Emergencies[] @relation(name: "Emergencies")
  assignedReports Reports[]     @relation(name: "Assigned")
}

model Reports {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt // Automatically updates to the current timestamp on each change
  reportType ReportTypeEnum // "CampusMaintenance", "Emergencies", or "HandbookViolation"

  // Common fields
  problemType    String?
  location       String?
  userId         String?
  user           User?       @relation(name: "Reports", fields: [userId], references: [id])
  status         StatusEnum? @default(Request)
  isArchived     Boolean     @default(false)
  details        String?
  assginedUserId String?
  assigned       User?       @relation(name: "Assigned", fields: [assginedUserId], references: [id])

  // Handbook Violation-specific fields
  violatorName  String?
  violationDate DateTime?

  // Shared media/evidence field
  attachments String[] // Combined field for both media and evidence
}

enum EmergencyStatusEnum {
  PENDING // Call is initiated but not answered yet
  ACTIVE // Call is ongoing
  COMPLETED // Call has ended successfully
  CANCELED // Call was canceled before being completed
  FAILED // Call failed due to technical issues
}

model Emergencies {
  id     String              @id @default(cuid())
  userId String
  user   User?               @relation(name: "Emergencies", fields: [userId], references: [id])
  status EmergencyStatusEnum @default(PENDING)

  // Call duration
  callStart DateTime  @default(now())
  callEnd   DateTime?

  // Peer
  peerId     String?
  recieverId String?

  //GPS Coordinates
  location       String?
  gpsCoordinates Decimal[] // For storing GPS coordinates as a string (latitude, longitude)
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  eventType   String
  userId      String
  ipAddress   String
  objectType  String
  objectId    String
  status      String
  description String?
  source      String?
}
